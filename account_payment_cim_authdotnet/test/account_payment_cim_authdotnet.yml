-
  I create a record for auth config.
-
  !record {model: auth.config, id: auth_config_1}:
    login_id: 2GP73eWWvb
    url_test: apitest.authorize.net
    transaction_key: 28hK9cWjCB6299n6
    xsd_link: AnetApi/xml/v1/schema/AnetApiSchema.xsd
    test_mode: True
    url: api.authorize.net
    url_extension: /xml/v1/request.api
-
  I modify a record for partner's company having authorization details.
- 
  !record {model: res.company, id: base.main_company}:
    currency_id: base.EUR
    cc_transaction_key: 28hK9cWjCB6299n6
    cc_login: 2GP73eWWvb
    auth_config_id: auth_config_1
-
  wiz record button.
- 
  !record {model: account.post.voucher, id: account_post_voucher_01}:
    total_paid: 0.0
    total_allocated: 0.0
    ok_to_go: 0.0
-
  I create a Payment Profile by clicking on 'Create Payment Profile' button.
- 
  !record {model: create.payment.profile, id: create_payment_profile_1}:
    cc_number: 370000000000002
    cc_ed_month: 10
    cc_ed_year: 2013
    cc_verify_code: 123
    address_id: base.res_partner_14
-
  I create a record for account journal
-
  !record {model: account.journal, id: account_journal_07}:
    name: Cash8
    code: BNK08
    type: 'cash'
    user_id: base.user_root
    company_id: base.main_company
-
  I create a sale order with payment method details.
-
  !record {model: sale.order, id: sale_order_so8}:
    amount_total: 885.0
    amount_untaxed: 885.0
    date_order: '2013-09-17'
    partner_id: base.res_partner_14
    pricelist_id: product.list0
    shop_id: sale.sale_shop_1
    payment_method: 'cc_pre_auth'
    order_policy: 'manual'
    order_line:
     - name: '[CARD] Graphics Card'
       product_id: product.product_product_24
       product_uom_qty: 1.0
       price_unit: 885.0
-
  I Confirm the sale order
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_so8}
-
  I create an invoice
-
  !workflow {model: sale.order, action: subflow.paid, ref: sale_order_so8}
-
  I click on 'Register Payment' button
-
  !python {model: account.invoice}: |
    ctx={}
    #order_id = self.pool.get('sale.order').search(cr, uid, [('name', '=', ref('sale_order_so8'))])
    order_id = self.pool.get('sale.order').browse(cr, uid, ref('sale_order_so8'), context=context).invoice_ids[0].id
    #assert not order_id, order_id
    #data = self.invoice_pay_customer(cr, uid, [order_id.id])
    #assert not data, data
    #self.write(cr, uid, [order_id.id], {'journal_id': ref('account_journal_07')}, context)
    inv_rec = self.browse(cr, uid, order_id, context=context)
    #assert not inv_rec, inv_rec
    voucher_ids = self.pool.get('account.voucher').create(cr, uid, {'payment_expected_currency': inv_rec.currency_id.id, 'partner_id': self.pool.get('res.partner')._find_accounting_partner(inv_rec.partner_id).id, 'amount': inv_rec.type in ('out_refund', 'in_refund') and -inv_rec.residual or inv_rec.residual, 'reference': inv_rec.name, 'close_after_process': True, 'invoice_type': inv_rec.type, 'invoice_id': inv_rec.id, 'type': inv_rec.type in ('out_invoice','out_refund') and 'receipt' or 'payment', 'journal_id': ref('account_journal_07'), 'account_id': ref('account.a_recv')})
    #assert not voucher_ids, voucher_ids
    #post_data = self.pool.get('account.voucher').proforma_voucher(cr, uid, ref('voucher_ids'))
    #!python {model: create.payment.profile}: |
    ctx.update({'active_model': 'account.voucher', 'active_ids': [voucher_ids], 'active_id': voucher_ids})
    profile_id = self.pool.get('create.payment.profile').create_payment_profile(cr, uid, [ref('create_payment_profile_1')], ctx)
    update_voucher_ids = self.pool.get('account.voucher').write(cr, uid, [voucher_ids], {'payment_profile_id': profile_id[0], 'journal_id': ref('account_journal_07')}, context)
    #ctx.update({'active_model': 'account.voucher', 'active_ids': [voucher_ids], 'active_id': voucher_ids})
    wiz_id = self.pool.get('account.post.voucher').launch_wizard(cr, uid, [ref('account_post_voucher_01')], ctx)
    #assert not data, data
    self.pool.get('account.voucher').authorize(cr, uid, [voucher_ids])
    charge_voucher_ids = self.pool.get('account.voucher').write(cr, uid, [voucher_ids], {'cc_charge': True, 'cc_p_authorize': False}, context)
    self.pool.get('account.voucher').authorize(cr, uid, [voucher_ids])
